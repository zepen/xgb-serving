// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apis/estimate.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_apis_2festimate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_apis_2festimate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_apis_2festimate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_apis_2festimate_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_apis_2festimate_2eproto;
namespace estimate {
namespace server {
class EstimateRequest;
struct EstimateRequestDefaultTypeInternal;
extern EstimateRequestDefaultTypeInternal _EstimateRequest_default_instance_;
class EstimateResponse;
struct EstimateResponseDefaultTypeInternal;
extern EstimateResponseDefaultTypeInternal _EstimateResponse_default_instance_;
class EstimateResponse_OutputsEntry_DoNotUse;
struct EstimateResponse_OutputsEntry_DoNotUseDefaultTypeInternal;
extern EstimateResponse_OutputsEntry_DoNotUseDefaultTypeInternal _EstimateResponse_OutputsEntry_DoNotUse_default_instance_;
class NoteFeatures;
struct NoteFeaturesDefaultTypeInternal;
extern NoteFeaturesDefaultTypeInternal _NoteFeatures_default_instance_;
class NoteFeatures_FeaturesEntry_DoNotUse;
struct NoteFeatures_FeaturesEntry_DoNotUseDefaultTypeInternal;
extern NoteFeatures_FeaturesEntry_DoNotUseDefaultTypeInternal _NoteFeatures_FeaturesEntry_DoNotUse_default_instance_;
class UserFeatures;
struct UserFeaturesDefaultTypeInternal;
extern UserFeaturesDefaultTypeInternal _UserFeatures_default_instance_;
class UserFeatures_FeaturesEntry_DoNotUse;
struct UserFeatures_FeaturesEntry_DoNotUseDefaultTypeInternal;
extern UserFeatures_FeaturesEntry_DoNotUseDefaultTypeInternal _UserFeatures_FeaturesEntry_DoNotUse_default_instance_;
}  // namespace server
}  // namespace estimate
PROTOBUF_NAMESPACE_OPEN
template<> ::estimate::server::EstimateRequest* Arena::CreateMaybeMessage<::estimate::server::EstimateRequest>(Arena*);
template<> ::estimate::server::EstimateResponse* Arena::CreateMaybeMessage<::estimate::server::EstimateResponse>(Arena*);
template<> ::estimate::server::EstimateResponse_OutputsEntry_DoNotUse* Arena::CreateMaybeMessage<::estimate::server::EstimateResponse_OutputsEntry_DoNotUse>(Arena*);
template<> ::estimate::server::NoteFeatures* Arena::CreateMaybeMessage<::estimate::server::NoteFeatures>(Arena*);
template<> ::estimate::server::NoteFeatures_FeaturesEntry_DoNotUse* Arena::CreateMaybeMessage<::estimate::server::NoteFeatures_FeaturesEntry_DoNotUse>(Arena*);
template<> ::estimate::server::UserFeatures* Arena::CreateMaybeMessage<::estimate::server::UserFeatures>(Arena*);
template<> ::estimate::server::UserFeatures_FeaturesEntry_DoNotUse* Arena::CreateMaybeMessage<::estimate::server::UserFeatures_FeaturesEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace estimate {
namespace server {

// ===================================================================

class UserFeatures_FeaturesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UserFeatures_FeaturesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UserFeatures_FeaturesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  UserFeatures_FeaturesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR UserFeatures_FeaturesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit UserFeatures_FeaturesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const UserFeatures_FeaturesEntry_DoNotUse& other);
  static const UserFeatures_FeaturesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const UserFeatures_FeaturesEntry_DoNotUse*>(&_UserFeatures_FeaturesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "estimate.server.UserFeatures.FeaturesEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "estimate.server.UserFeatures.FeaturesEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_apis_2festimate_2eproto;
};

// -------------------------------------------------------------------

class UserFeatures final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:estimate.server.UserFeatures) */ {
 public:
  inline UserFeatures() : UserFeatures(nullptr) {}
  ~UserFeatures() override;
  explicit PROTOBUF_CONSTEXPR UserFeatures(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserFeatures(const UserFeatures& from);
  UserFeatures(UserFeatures&& from) noexcept
    : UserFeatures() {
    *this = ::std::move(from);
  }

  inline UserFeatures& operator=(const UserFeatures& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserFeatures& operator=(UserFeatures&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserFeatures& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserFeatures* internal_default_instance() {
    return reinterpret_cast<const UserFeatures*>(
               &_UserFeatures_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UserFeatures& a, UserFeatures& b) {
    a.Swap(&b);
  }
  inline void Swap(UserFeatures* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserFeatures* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserFeatures* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserFeatures>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserFeatures& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UserFeatures& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserFeatures* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "estimate.server.UserFeatures";
  }
  protected:
  explicit UserFeatures(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kFeaturesFieldNumber = 2,
    kUserIdFieldNumber = 1,
  };
  // map<string, string> features = 2;
  int features_size() const;
  private:
  int _internal_features_size() const;
  public:
  void clear_features();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_features() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_features();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      features() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_features();

  // uint64 userId = 1;
  void clear_userid();
  uint64_t userid() const;
  void set_userid(uint64_t value);
  private:
  uint64_t _internal_userid() const;
  void _internal_set_userid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:estimate.server.UserFeatures)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      UserFeatures_FeaturesEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> features_;
  uint64_t userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_apis_2festimate_2eproto;
};
// -------------------------------------------------------------------

class NoteFeatures_FeaturesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<NoteFeatures_FeaturesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<NoteFeatures_FeaturesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  NoteFeatures_FeaturesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR NoteFeatures_FeaturesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit NoteFeatures_FeaturesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const NoteFeatures_FeaturesEntry_DoNotUse& other);
  static const NoteFeatures_FeaturesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const NoteFeatures_FeaturesEntry_DoNotUse*>(&_NoteFeatures_FeaturesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "estimate.server.NoteFeatures.FeaturesEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "estimate.server.NoteFeatures.FeaturesEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_apis_2festimate_2eproto;
};

// -------------------------------------------------------------------

class NoteFeatures final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:estimate.server.NoteFeatures) */ {
 public:
  inline NoteFeatures() : NoteFeatures(nullptr) {}
  ~NoteFeatures() override;
  explicit PROTOBUF_CONSTEXPR NoteFeatures(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NoteFeatures(const NoteFeatures& from);
  NoteFeatures(NoteFeatures&& from) noexcept
    : NoteFeatures() {
    *this = ::std::move(from);
  }

  inline NoteFeatures& operator=(const NoteFeatures& from) {
    CopyFrom(from);
    return *this;
  }
  inline NoteFeatures& operator=(NoteFeatures&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NoteFeatures& default_instance() {
    return *internal_default_instance();
  }
  static inline const NoteFeatures* internal_default_instance() {
    return reinterpret_cast<const NoteFeatures*>(
               &_NoteFeatures_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(NoteFeatures& a, NoteFeatures& b) {
    a.Swap(&b);
  }
  inline void Swap(NoteFeatures* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NoteFeatures* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NoteFeatures* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NoteFeatures>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NoteFeatures& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NoteFeatures& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NoteFeatures* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "estimate.server.NoteFeatures";
  }
  protected:
  explicit NoteFeatures(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kFeaturesFieldNumber = 2,
    kNoteIdFieldNumber = 1,
  };
  // map<string, string> features = 2;
  int features_size() const;
  private:
  int _internal_features_size() const;
  public:
  void clear_features();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_features() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_features();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      features() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_features();

  // uint64 noteId = 1;
  void clear_noteid();
  uint64_t noteid() const;
  void set_noteid(uint64_t value);
  private:
  uint64_t _internal_noteid() const;
  void _internal_set_noteid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:estimate.server.NoteFeatures)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      NoteFeatures_FeaturesEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> features_;
  uint64_t noteid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_apis_2festimate_2eproto;
};
// -------------------------------------------------------------------

class EstimateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:estimate.server.EstimateRequest) */ {
 public:
  inline EstimateRequest() : EstimateRequest(nullptr) {}
  ~EstimateRequest() override;
  explicit PROTOBUF_CONSTEXPR EstimateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EstimateRequest(const EstimateRequest& from);
  EstimateRequest(EstimateRequest&& from) noexcept
    : EstimateRequest() {
    *this = ::std::move(from);
  }

  inline EstimateRequest& operator=(const EstimateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EstimateRequest& operator=(EstimateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EstimateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const EstimateRequest* internal_default_instance() {
    return reinterpret_cast<const EstimateRequest*>(
               &_EstimateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(EstimateRequest& a, EstimateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EstimateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EstimateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EstimateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EstimateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EstimateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EstimateRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EstimateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "estimate.server.EstimateRequest";
  }
  protected:
  explicit EstimateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNfFieldNumber = 2,
    kUfFieldNumber = 1,
  };
  // repeated .estimate.server.NoteFeatures nf = 2;
  int nf_size() const;
  private:
  int _internal_nf_size() const;
  public:
  void clear_nf();
  ::estimate::server::NoteFeatures* mutable_nf(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::estimate::server::NoteFeatures >*
      mutable_nf();
  private:
  const ::estimate::server::NoteFeatures& _internal_nf(int index) const;
  ::estimate::server::NoteFeatures* _internal_add_nf();
  public:
  const ::estimate::server::NoteFeatures& nf(int index) const;
  ::estimate::server::NoteFeatures* add_nf();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::estimate::server::NoteFeatures >&
      nf() const;

  // .estimate.server.UserFeatures uf = 1;
  bool has_uf() const;
  private:
  bool _internal_has_uf() const;
  public:
  void clear_uf();
  const ::estimate::server::UserFeatures& uf() const;
  PROTOBUF_NODISCARD ::estimate::server::UserFeatures* release_uf();
  ::estimate::server::UserFeatures* mutable_uf();
  void set_allocated_uf(::estimate::server::UserFeatures* uf);
  private:
  const ::estimate::server::UserFeatures& _internal_uf() const;
  ::estimate::server::UserFeatures* _internal_mutable_uf();
  public:
  void unsafe_arena_set_allocated_uf(
      ::estimate::server::UserFeatures* uf);
  ::estimate::server::UserFeatures* unsafe_arena_release_uf();

  // @@protoc_insertion_point(class_scope:estimate.server.EstimateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::estimate::server::NoteFeatures > nf_;
  ::estimate::server::UserFeatures* uf_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_apis_2festimate_2eproto;
};
// -------------------------------------------------------------------

class EstimateResponse_OutputsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<EstimateResponse_OutputsEntry_DoNotUse, 
    uint64_t, float,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<EstimateResponse_OutputsEntry_DoNotUse, 
    uint64_t, float,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT> SuperType;
  EstimateResponse_OutputsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR EstimateResponse_OutputsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit EstimateResponse_OutputsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const EstimateResponse_OutputsEntry_DoNotUse& other);
  static const EstimateResponse_OutputsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const EstimateResponse_OutputsEntry_DoNotUse*>(&_EstimateResponse_OutputsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_apis_2festimate_2eproto;
};

// -------------------------------------------------------------------

class EstimateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:estimate.server.EstimateResponse) */ {
 public:
  inline EstimateResponse() : EstimateResponse(nullptr) {}
  ~EstimateResponse() override;
  explicit PROTOBUF_CONSTEXPR EstimateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EstimateResponse(const EstimateResponse& from);
  EstimateResponse(EstimateResponse&& from) noexcept
    : EstimateResponse() {
    *this = ::std::move(from);
  }

  inline EstimateResponse& operator=(const EstimateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EstimateResponse& operator=(EstimateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EstimateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const EstimateResponse* internal_default_instance() {
    return reinterpret_cast<const EstimateResponse*>(
               &_EstimateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(EstimateResponse& a, EstimateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(EstimateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EstimateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EstimateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EstimateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EstimateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EstimateResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EstimateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "estimate.server.EstimateResponse";
  }
  protected:
  explicit EstimateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kOutputsFieldNumber = 1,
  };
  // map<uint64, float> outputs = 1;
  int outputs_size() const;
  private:
  int _internal_outputs_size() const;
  public:
  void clear_outputs();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, float >&
      _internal_outputs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, float >*
      _internal_mutable_outputs();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, float >&
      outputs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, float >*
      mutable_outputs();

  // @@protoc_insertion_point(class_scope:estimate.server.EstimateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      EstimateResponse_OutputsEntry_DoNotUse,
      uint64_t, float,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT> outputs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_apis_2festimate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// UserFeatures

// uint64 userId = 1;
inline void UserFeatures::clear_userid() {
  userid_ = uint64_t{0u};
}
inline uint64_t UserFeatures::_internal_userid() const {
  return userid_;
}
inline uint64_t UserFeatures::userid() const {
  // @@protoc_insertion_point(field_get:estimate.server.UserFeatures.userId)
  return _internal_userid();
}
inline void UserFeatures::_internal_set_userid(uint64_t value) {
  
  userid_ = value;
}
inline void UserFeatures::set_userid(uint64_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:estimate.server.UserFeatures.userId)
}

// map<string, string> features = 2;
inline int UserFeatures::_internal_features_size() const {
  return features_.size();
}
inline int UserFeatures::features_size() const {
  return _internal_features_size();
}
inline void UserFeatures::clear_features() {
  features_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
UserFeatures::_internal_features() const {
  return features_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
UserFeatures::features() const {
  // @@protoc_insertion_point(field_map:estimate.server.UserFeatures.features)
  return _internal_features();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
UserFeatures::_internal_mutable_features() {
  return features_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
UserFeatures::mutable_features() {
  // @@protoc_insertion_point(field_mutable_map:estimate.server.UserFeatures.features)
  return _internal_mutable_features();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// NoteFeatures

// uint64 noteId = 1;
inline void NoteFeatures::clear_noteid() {
  noteid_ = uint64_t{0u};
}
inline uint64_t NoteFeatures::_internal_noteid() const {
  return noteid_;
}
inline uint64_t NoteFeatures::noteid() const {
  // @@protoc_insertion_point(field_get:estimate.server.NoteFeatures.noteId)
  return _internal_noteid();
}
inline void NoteFeatures::_internal_set_noteid(uint64_t value) {
  
  noteid_ = value;
}
inline void NoteFeatures::set_noteid(uint64_t value) {
  _internal_set_noteid(value);
  // @@protoc_insertion_point(field_set:estimate.server.NoteFeatures.noteId)
}

// map<string, string> features = 2;
inline int NoteFeatures::_internal_features_size() const {
  return features_.size();
}
inline int NoteFeatures::features_size() const {
  return _internal_features_size();
}
inline void NoteFeatures::clear_features() {
  features_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
NoteFeatures::_internal_features() const {
  return features_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
NoteFeatures::features() const {
  // @@protoc_insertion_point(field_map:estimate.server.NoteFeatures.features)
  return _internal_features();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
NoteFeatures::_internal_mutable_features() {
  return features_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
NoteFeatures::mutable_features() {
  // @@protoc_insertion_point(field_mutable_map:estimate.server.NoteFeatures.features)
  return _internal_mutable_features();
}

// -------------------------------------------------------------------

// EstimateRequest

// .estimate.server.UserFeatures uf = 1;
inline bool EstimateRequest::_internal_has_uf() const {
  return this != internal_default_instance() && uf_ != nullptr;
}
inline bool EstimateRequest::has_uf() const {
  return _internal_has_uf();
}
inline void EstimateRequest::clear_uf() {
  if (GetArenaForAllocation() == nullptr && uf_ != nullptr) {
    delete uf_;
  }
  uf_ = nullptr;
}
inline const ::estimate::server::UserFeatures& EstimateRequest::_internal_uf() const {
  const ::estimate::server::UserFeatures* p = uf_;
  return p != nullptr ? *p : reinterpret_cast<const ::estimate::server::UserFeatures&>(
      ::estimate::server::_UserFeatures_default_instance_);
}
inline const ::estimate::server::UserFeatures& EstimateRequest::uf() const {
  // @@protoc_insertion_point(field_get:estimate.server.EstimateRequest.uf)
  return _internal_uf();
}
inline void EstimateRequest::unsafe_arena_set_allocated_uf(
    ::estimate::server::UserFeatures* uf) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uf_);
  }
  uf_ = uf;
  if (uf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:estimate.server.EstimateRequest.uf)
}
inline ::estimate::server::UserFeatures* EstimateRequest::release_uf() {
  
  ::estimate::server::UserFeatures* temp = uf_;
  uf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::estimate::server::UserFeatures* EstimateRequest::unsafe_arena_release_uf() {
  // @@protoc_insertion_point(field_release:estimate.server.EstimateRequest.uf)
  
  ::estimate::server::UserFeatures* temp = uf_;
  uf_ = nullptr;
  return temp;
}
inline ::estimate::server::UserFeatures* EstimateRequest::_internal_mutable_uf() {
  
  if (uf_ == nullptr) {
    auto* p = CreateMaybeMessage<::estimate::server::UserFeatures>(GetArenaForAllocation());
    uf_ = p;
  }
  return uf_;
}
inline ::estimate::server::UserFeatures* EstimateRequest::mutable_uf() {
  ::estimate::server::UserFeatures* _msg = _internal_mutable_uf();
  // @@protoc_insertion_point(field_mutable:estimate.server.EstimateRequest.uf)
  return _msg;
}
inline void EstimateRequest::set_allocated_uf(::estimate::server::UserFeatures* uf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete uf_;
  }
  if (uf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(uf);
    if (message_arena != submessage_arena) {
      uf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uf, submessage_arena);
    }
    
  } else {
    
  }
  uf_ = uf;
  // @@protoc_insertion_point(field_set_allocated:estimate.server.EstimateRequest.uf)
}

// repeated .estimate.server.NoteFeatures nf = 2;
inline int EstimateRequest::_internal_nf_size() const {
  return nf_.size();
}
inline int EstimateRequest::nf_size() const {
  return _internal_nf_size();
}
inline void EstimateRequest::clear_nf() {
  nf_.Clear();
}
inline ::estimate::server::NoteFeatures* EstimateRequest::mutable_nf(int index) {
  // @@protoc_insertion_point(field_mutable:estimate.server.EstimateRequest.nf)
  return nf_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::estimate::server::NoteFeatures >*
EstimateRequest::mutable_nf() {
  // @@protoc_insertion_point(field_mutable_list:estimate.server.EstimateRequest.nf)
  return &nf_;
}
inline const ::estimate::server::NoteFeatures& EstimateRequest::_internal_nf(int index) const {
  return nf_.Get(index);
}
inline const ::estimate::server::NoteFeatures& EstimateRequest::nf(int index) const {
  // @@protoc_insertion_point(field_get:estimate.server.EstimateRequest.nf)
  return _internal_nf(index);
}
inline ::estimate::server::NoteFeatures* EstimateRequest::_internal_add_nf() {
  return nf_.Add();
}
inline ::estimate::server::NoteFeatures* EstimateRequest::add_nf() {
  ::estimate::server::NoteFeatures* _add = _internal_add_nf();
  // @@protoc_insertion_point(field_add:estimate.server.EstimateRequest.nf)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::estimate::server::NoteFeatures >&
EstimateRequest::nf() const {
  // @@protoc_insertion_point(field_list:estimate.server.EstimateRequest.nf)
  return nf_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// EstimateResponse

// map<uint64, float> outputs = 1;
inline int EstimateResponse::_internal_outputs_size() const {
  return outputs_.size();
}
inline int EstimateResponse::outputs_size() const {
  return _internal_outputs_size();
}
inline void EstimateResponse::clear_outputs() {
  outputs_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, float >&
EstimateResponse::_internal_outputs() const {
  return outputs_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, float >&
EstimateResponse::outputs() const {
  // @@protoc_insertion_point(field_map:estimate.server.EstimateResponse.outputs)
  return _internal_outputs();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, float >*
EstimateResponse::_internal_mutable_outputs() {
  return outputs_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, float >*
EstimateResponse::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_map:estimate.server.EstimateResponse.outputs)
  return _internal_mutable_outputs();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace server
}  // namespace estimate

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_apis_2festimate_2eproto
